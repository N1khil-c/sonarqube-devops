name: Pyhton CI/CD with Maven

env:
  project_id: db-cicdpipeline-wave-3
on:
  push:
    branches:
      - main
      - pui-test
  workflow_dispatch:
permissions:
  contents: read
  pages: write
  id-token: write
jobs:
  BuildMaven:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Test with pytest
      run: |
        pytest	--junitxml=coverage.xml 
        py.test --cov-report term --cov-report xml:coverage.xml --cov=/src/test/test_area.py
    
    - name: Build and Package
      run: |
        mvn clean package
        ls -lart target/*

    - name: Cache SonarQube packages
      uses: actions/cache@v1
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache Maven packages
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build and analyze
      env:
        #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar


    - name: publish unit test report
      uses: actions/upload-artifact@v2
      with:
        path: /home/runner/work/sonarqube-devops/sonarqube-devops/coverage.xml
        name: coverage.xml
        
    - name: publish artifact
      uses: actions/upload-artifact@v2
      with:
        path: target/*.zip
        name: Devops.zip
        
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
          token_format: 'access_token'
          workload_identity_provider: ${{ secrets.GIT_HUB__CICD_PROVIDE }}
          service_account: ${{ secrets.garage_service_account }}
    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: Deploy to GCS
      run: |
       gcloud auth application-default print-access-token
       gsutil cp $GITHUB_WORKSPACE/src/main/area.py gs://asia-south2-composer-enviro-719fa6a7-bucket/dags
